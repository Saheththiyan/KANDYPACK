name: CI/CD Pipeline

on:
  push:
    branches: [ main, Dev ]
  pull_request:
    branches: [ main, Dev ]

jobs:
  # Job 1: Lint all code
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      # Lint Backend
      # - name: Install backend dependencies
      #   run: |
      #     cd Backend
      #     npm ci

      # - name: Lint backend code
      #   run: |
      #     cd Backend
      #     npm run lint

      # Lint Frontend
      # - name: Install frontend dependencies
      #   run: |
      #     cd Frontend
      #     npm ci

      # - name: Lint frontend code
      #   run: |
      #     cd Frontend
      #     npm run lint

      - name: TypeScript check
        # run: |
        #   cd Frontend
        #   npm run type-check
        run: echo "TypeScript check would run here"

      # Lint Docker and YAML files
      - name: Run Hadolint (Dockerfile linter)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Backend/Dockerfile

      - name: Run Hadolint on Frontend Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Frontend/Dockerfile

      - name: Run Hadolint on DB Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: DB/Dockerfile

      - name: Lint YAML files
        uses: ibiqlik/action-yamllint@v3
        with:
          config_file: .yamllint.yml

  # Job 2: Run tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint # Only run tests if linting passes

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: kandypack_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      # Test Backend
      - name: Install backend dependencies
        run: |
          cd Backend
          npm ci

      - name: Run backend tests
        env:
          DB_HOST: localhost
          DB_USER: root
          DB_PASSWORD: test_password
          DB_NAME: kandypack_test
          JWT_SECRET: test_secret_key_for_testing
          NODE_ENV: test
        # run: |
        #   cd Backend
        #   npm test
        run: echo "Backend tests would run here"

      # Test Frontend
      - name: Install frontend dependencies
        run: |
          cd Frontend
          npm ci

      - name: Run frontend tests
        run: |
          cd Frontend
          npm test

  # Job 3: Build and push Docker images
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [lint, test] # Only run if both lint and test pass
    if: github.ref == 'refs/heads/main' # Only push images on main branch

    strategy:
      matrix:
        service: [backend, frontend, db]
        include:
          - service: backend
            context: ./Backend
            dockerfile: ./Backend/Dockerfile
          - service: frontend
            context: ./Frontend
            dockerfile: ./Frontend/Dockerfile
          - service: db
            context: ./DB
            dockerfile: ./DB/Dockerfile

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/kandypack-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push ${{ matrix.service }} Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 4: Deploy (optional - only runs after successful build)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy notification
        run: |
          echo "ðŸš€ Deployment would happen here"
          echo "Images built and pushed successfully:"
          echo "- ${{ secrets.DOCKERHUB_USERNAME }}/kandypack-backend:latest"
          echo "- ${{ secrets.DOCKERHUB_USERNAME }}/kandypack-frontend:latest"
          echo "- ${{ secrets.DOCKERHUB_USERNAME }}/kandypack-db:latest"